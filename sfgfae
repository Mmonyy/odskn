#include <iostream>
#include <vector>

push_back(val): Aggiunge un elemento alla fine.
pop_back(): Rimuove l'ultimo elemento.
insert(pos, val): Inserisce un elemento in una data posizione.
erase(pos): Rimuove un elemento in una data posizione.
clear(): Cancella tutti gli elementi.
resize(n): Cambia la dimensione del vettore.
assign(n, val): Sostituisce tutti gli elementi con n copie di val.
at(i): Ritorna l'elemento in posizione i (con controllo limiti).
size(): Ritorna il numero di elementi.
capacity(): Ritorna la capacità del vettore.
empty(): Restituisce true se il vettore è vuoto.
max_size(): Ritorna la dimensione massima possibile.

~

#include <iostream>
#include <cmath>
using namespace std;

class Figura {
private:
    string colore;

public:
    void impostaColore(const string &c) {
        colore = c;
    }
    string getColore() const {
        return colore;
    }
};

class Cerchio : public Figura {
private:
    double raggio;

public:
    Cerchio(double r) : raggio(r) {}

    double calcolaArea() const {
        return M_PI * raggio * raggio;
    }
};

~

import java.time.LocalDate;
import java.time.LocalDateTime;

// Classe base per i cassonetti
abstract class Cassonetto {
    protected String codiceUnivoco;
    protected double latitudine;
    protected double longitudine;
    protected LocalDate dataInstallazione;
    protected LocalDateTime dataUltimoSvuotamento;
    protected double capacitaMassima;
    protected double quantitaAttuale;

    public Cassonetto(String codiceUnivoco, double latitudine, double longitudine, double capacitaMassima) {
        this.codiceUnivoco = codiceUnivoco;
        this.latitudine = latitudine;
        this.longitudine = longitudine;
        this.dataInstallazione = LocalDate.now();
        this.dataUltimoSvuotamento = LocalDateTime.now();
        this.capacitaMassima = capacitaMassima;
        this.quantitaAttuale = 0;
    }

    public void registrareSvuotamento() {
        this.quantitaAttuale = 0;
        this.dataUltimoSvuotamento = LocalDateTime.now();
    }

    public double calcolaPercentualeRiempimento() {
        return (quantitaAttuale / capacitaMassima) * 100;
    }

    public void aggiungiRifiuto(double quantita) {
        if (quantitaAttuale + quantita <= capacitaMassima) {
            quantitaAttuale += quantita;
        } else {
            System.out.println("Cassonetto pieno! Non è possibile aggiungere altro rifiuto.");
        }
    }

    public String toString() {
        return "Cassonetto " + codiceUnivoco + " - Riempimento: " + calcolaPercentualeRiempimento() + "%";
    }
}

// Sottoclasse per il cassonetto dell'organico (peso in kg)
class CassonettoOrganico extends Cassonetto {
    public CassonettoOrganico(String codice, double lat, double lon, double capacitaMax) {
        super(codice, lat, lon, capacitaMax);
    }
}

// Sottoclasse per il cassonetto del vetro (numero di bottiglie)
class CassonettoVetro extends Cassonetto {
    public CassonettoVetro(String codice, double lat, double lon, double capacitaMax) {
        super(codice, lat, lon, capacitaMax);
    }
}

// Sottoclassi per carta, plastica/metallo e indifferenziato (volume in litri)
class CassonettoCarta extends Cassonetto {
    public CassonettoCarta(String codice, double lat, double lon, double capacitaMax) {
        super(codice, lat, lon, capacitaMax);
    }
}

class CassonettoPlasticaMetallo extends Cassonetto {
    public CassonettoPlasticaMetallo(String codice, double lat, double lon, double capacitaMax) {
        super(codice, lat, lon, capacitaMax);
    }
}

class CassonettoIndifferenziato extends Cassonetto {
    public CassonettoIndifferenziato(String codice, double lat, double lon, double capacitaMax) {
        super(codice, lat, lon, capacitaMax);
    }
}

// Classe per il test
public class SmartWasteTest {
    public static void main(String[] args) {
        CassonettoOrganico organico = new CassonettoOrganico("ORG-001", 45.4642, 9.1900, 50);
        CassonettoVetro vetro = new CassonettoVetro("VET-001", 45.4643, 9.1910, 100);
        CassonettoCarta carta = new CassonettoCarta("CAR-001", 45.4644, 9.1920, 200);
        CassonettoPlasticaMetallo plasticaMetallo = new CassonettoPlasticaMetallo("PLA-001", 45.4645, 9.1930, 150);
        CassonettoIndifferenziato indifferenziato = new CassonettoIndifferenziato("IND-001", 45.4646, 9.1940, 120);
        
        // Test inserimento rifiuti
        organico.aggiungiRifiuto(20);
        vetro.aggiungiRifiuto(50);
        carta.aggiungiRifiuto(100);
        plasticaMetallo.aggiungiRifiuto(120);
        indifferenziato.aggiungiRifiuto(60);

        // Stampa lo stato di riempimento
        System.out.println(organico);
        System.out.println(vetro);
        System.out.println(carta);
        System.out.println(plasticaMetallo);
        System.out.println(indifferenziato);
        
        // Test svuotamento
        organico.registrareSvuotamento();
        System.out.println("Dopo svuotamento: " + organico);
    }
}
